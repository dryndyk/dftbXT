#------------------------------------------------------------------------------#
#  DFTB+: general package for performing fast atomistic simulations            #
#  Copyright (C) 2017  DFTB+ developers group                                  #
#                                                                              #
#  See the LICENSE file for terms of usage and distribution.                   #
#------------------------------------------------------------------------------#
.SUFFIXES:
.SUFFIXES: .f .f90 .c .o

TARGETS = test_fileinit test_fileinitc test_treeinit test_extpot test_extpot2 test_extcharges \
    test_qdepextpot test_qdepextpotc

.PHONY: all
all: $(TARGETS)

include $(ROOT)/make.config

vpath % $(ROOT)/test/api/mm/testers

#
# Include and library settings
#

INCOPTS := -I$(BUILDDIR)/api/mm
LIBOPTS := -L$(BUILDDIR)/api/mm -ldftb+

# xmlf90 library
INCOPTS += -I$(BUILDDIR)/external/xmlf90
LIBOPTS +=  -L$(BUILDDIR)/external/xmlf90 -lxmlf90

# optional DFTD3 library
ifeq ($(strip $(WITH_DFTD3)),1)
  INCOPTS += -I$(BUILDROOT)/external/dftd3
  LIBOPTS += -L$(BUILDROOT)/external/dftd3 -ldftd3
endif

LIBOPTS += $(LIB_LAPACK)

CINCOPTS := -I$(ROOT)/prog/dftb+/api/mm


#
# General rules
#

%.o: %.f90
	$(FXX) $(FXXOPT) $(INCOPTS) -o $@ -c $<

%.o: %.c
	$(CC) $(CCOPT) $(CINCOPTS) -o $@ -c $<


#
# Dependencies and linking commands
#

extchargepot.o:

extchargepotgen.o: extchargepot.o

test_fileinit: test_fileinit.o testhelpers.o
	$(LN) $(LNOPT) -o $@ $^ $(LIBOPTS) $(OTHERLIBS)

test_fileinit.o: testhelpers.o


test_fileinitc: test_fileinitc.o testhelpers.o
	$(LN_C) $(LNOPT_C) -o $@ $^ $(LIBOPTS) $(OTHERLIBS) $(OTHERLIBS_C)

test_fileinitc.o: testhelpers.o


test_treeinit: test_treeinit.o testhelpers.o
	$(LN) $(LNOPT) -o $@ $^ $(LIBOPTS) $(OTHERLIBS)

test_treeinit.o: testhelpers.o


test_extpot: test_extpot.o extchargepot.o testhelpers.o
	$(LN) $(LNOPT) -o $@ $^ $(LIBOPTS) $(OTHERLIBS)

test_extpot.o: extchargepot.o testhelpers.o


test_extpot2: test_extpot2.o extchargepot.o testhelpers.o
	$(LN) $(LNOPT) -o $@ $^ $(LIBOPTS) $(OTHERLIBS)

test_extpot2.o: extchargepot.o testhelpers.o


test_extcharges: test_extcharges.o testhelpers.o
	$(LN) $(LNOPT) -o $@ $^ $(LIBOPTS) $(OTHERLIBS)

test_extcharges.o: testhelpers.o


test_qdepextpot: test_qdepextpot.o extchargepotgen.o extchargepot.o testhelpers.o
	$(LN) $(LNOPT) -o $@ $^ $(LIBOPTS) $(OTHERLIBS)

test_qdepextpot.o: extchargepotgen.o extchargepot.o testhelpers.o


test_qdepextpotc: test_qdepextpotc.o testhelpers.o
	$(LN_C) $(LNOPT_C) -o $@ $^ $(LIBOPTS) $(OTHERLIBS) $(OTHERLIBS_C)

test_qdepextpotc.o: testhelpers.o


################################################################################
# Testing
################################################################################

# Check for presence of a C compiler
ifdef CC
FYPPOPT += -DCC
endif

TESTDIR := $(ROOT)/test/api/mm

# File with the list of the tests
TESTFILE := $(TESTDIR)/tests

# Root directory of all test cases
TESTCASE_ROOT := $(TESTDIR)/testcases

# Working parent directory for tests
TEST_WORKDIR := testcases

# Where to put processed testfile
PROCESSED_TESTFILE := _tests

# Program to use for running and comparing
AUTOTEST_SCRIPT := $(ROOT)/test/prog/dftb+/bin/autotest2
TAGDIFF_SCRIPT := $(ROOT)/test/prog/dftb+/bin/tagdiff

# Include directory for Fypp
FYPPINCS := -I$(ROOT)/prog/dftb+/include

# Complete command with options
AUTOTEST_CMD := $(AUTOTEST_SCRIPT) -r $(TESTCASE_ROOT) -w $(TEST_WORKDIR) -d $(TAGDIFF_SCRIPT)

# Get list of tests to execute, but only if test is specified as goal
CREATE_PRETESTFILE := $(if $(filter test,$(MAKECMDGOALS)),\
	$(shell $(ROOT)/utils/test/testlist_to_fypp < $(TESTFILE) > $(PROCESSED_TESTFILE).fypp),)
CREATE_TESTFILE := $(if $(filter test,$(MAKECMDGOALS)),\
	$(shell $(FYPP) $(FYPPOPT) $(FYPPINCS) -DMPI_PROCS=$(TEST_MPI_PROCS) -DOMP_THREADS=$(TEST_OMP_THREADS) $(PROCESSED_TESTFILE).fypp $(PROCESSED_TESTFILE)),)
TESTS := $(if $(filter test,$(MAKECMDGOALS)),\
	$(shell $(AUTOTEST_CMD) -f $(PROCESSED_TESTFILE) -l),)

.PHONY: $(TESTS) test

# Prepare and run individual tests, possibly in parallel.
$(TESTS):
	@$(AUTOTEST_CMD) -P "$(TESTRUNNER)" -Q "$(POSTRUN)" -s P,R \
            $(AUTOTEST_FLAGS) $@

# Run calculations and immediately compare (possibly in parallel),
# then summarize.  The dependency ensures proper sequencing.
test: AUTOTEST_FLAGS = -s C -v
test: $(TESTS)
	@$(AUTOTEST_CMD) -s S $(TESTS)
